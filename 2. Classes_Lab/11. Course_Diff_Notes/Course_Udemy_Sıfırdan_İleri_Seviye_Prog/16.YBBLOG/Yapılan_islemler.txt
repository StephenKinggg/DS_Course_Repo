from flask import Flask, render_template

app = Flask(__name__)  # Web sunucumuzu kendi bs çalıştıracağımızdan dolayı bir obj. oluşturduk.

@app.route("/")  # ben bir adrese gitmek istiyorum. içine de adresi yazıyoruz. request roote olarak yazdık.
def index(): # request yazdık.
    return " Ana sayfa"  # böyle bir yazı dönsün yani bu response olacak. Tekrar localhost çalıştırınca işlem sonucunu görebiliriz.

@app.route("/about")   #bu işlem sonucu localhost:5000/about yazınca return işlemi sonucunu göreceğiz.
def about():
    return "Hakkımda"

@app.route("/about/kisi") 
def kisi():
    return " This page is about person."

if __name__ =="__main__" : # bir web sunucusunu çalıştırıyoruz.bir tane localhost çalıştırıyoruz.
    app.run(debug=True) # içine bir tane parametre verdik. hatalarımızı web sitemizde görelim. çünkü geliştirme aşamasındayız.
# burada if döngüsü ile biz python dosyasını başka bir dosyadan aktarmak istersek name değeri main olmuyor.
# name  main olması ile bu python dosyası terminalden mi çalıştırılmış yoksa bir modül olarakı mı
# çalıştırılmış onu anlıyoruz. Modül olarak aktarırsak name main eşit olmaması gerekir.
# web sunucumuzu bu kodlar ile hazırladıktan sonra YBBLOG sağ tıklayıp yeni bir int.terminal açtık.
# açılan alttaki terminale python blog_mine.py yazdık çalıştırdık.
# açılan local host crtl+c ile kapatabiliriz.
# browser dan localhost:5000 ile baktık. ancak hata verdiğini gördük.

# CRTL+C ile kapatıyoruz ve tekrar refresh yaparsak ulaşılamıyor.
# Daha sonra Xampp indiriyoruz. Ancak control paneli otomatik açtırmadık. 
# Burada Xampp control paneli açarak apache ve mysql start yaparak sunucularını açtık.
# Çalışırken bunların her zaman açık olması lazım.
# Daha sonra aynı yerden mysql admin açıyoruz. Bu açılan ekrandan herhangi bir sql sorgusunu çalıştırabiliyoruz.add()
# Tekrar local host açtık. Burada her bir request için bir response alacağız. 
# Yani her bir url adresi talebine karşın flask ta bir func bulunur. Bunun için hazır bir decorator mantığı kullanmamız gerekir.

-------------------------
# Yukarıda önce string template döndürmüştük şimdi ise bir html yani jinja template döndürmek istiyorum.
# bunu render ederek göndermek zorundayız. Bu durumda içine pyhton kodu yazabiliyorum.
# render_template func indirdik.

# .html django olarak açma sıkıntısını sağ alttan django html açıp sonra buradan html seçip kaldırıyoruz.
# template içine bir tane index.html oluşturduk. Bunun içinde oynamalar yaparak localhosttaki değişiklikleri görebiliriz.
# TERMİNAL de CTRL+C ile localhost kapatırsak çalıştırmak için python blog_mine.py yazacağız terminale.


# şimdi ise bu template bir python yapısı nasıl gönderilir onu incelemek için rakam= 10 tamamladık ve render içine , number=rakam olarak tanımladık.
#<h5>Rakam</h5>
 <p>{{ number }}</p>  bu şekilde bir tanımlama yaptık ve içine göndereceğimiz değişkeni yazdık. Ayrıca bir python verisi gönderirken bu şekilde iki süslü parantez içinde tanımlıyoruz.

from flask import Flask, render_template

app = Flask(__name__)  

@app.route("/")  
def index(): 
    rakam = 10
    rakam2 = 20
    return render_template("index.html", number=rakam, number2=rakam2)  #default olarak templates klasörüne gitti.

if __name__ =="__main__" : 
    app.run(debug=True)

index.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Anasayfa</title>
</head>

<body>
    <h3>Anasayfa</h3>
    <p>Burası anasayfadır.</p>

    <h5>Rakamlar</h5>
    <p>{{ number }}</p>
    <p>{{ number2 }}</p>

</body>

</html>


# Bu sefer dict bir yapı gönderdik.

from flask import Flask, render_template

app = Flask(__name__)  

@app.route("/")  
def index(): 
    article = dict()
    article["title"] = "Deneme"
    article["body"]  = "Deneme123"
    article["author"] = "Stephen"
    
    return render_template("index.html", article = article)  #default olarak templates klasörüne gitti.

if __name__ =="__main__" : 
    app.run(debug=True)


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Anasayfa</title>
</head>

<body>
    <h3>Anasayfa</h3>
    <p>Burası anasayfadır.</p>

    <h5>Articles</h5>
    <p>{{ article["title"] }}</p>    # article.title
    <p>{{ article["body"] }}</p>     # article.body
    <p>{{ article["author"] }}</p>   # article.author

</body>

</html>

# class inheritance olduğu gibi templates inheritance manığıda aynıdır.

önce templates klasörü içine yeni bir layout.html oluşturduk. bunu index içine inheritance olarak göndermek için önce index içini temizledik. 

index.html içine {% extends "layout.html" %} # anahtar kelimeler kullanmak istiyorsak bu şekilde kullanıyoruz yazdık.

sonra blog_mine.py içine 
@app.route("/")  
def index():   
    return render_template("index.html")  yazdık.

# Block yapıları:

Layout içine tanımladık.

<body>

    <h3>Layout</h3>

    {% block World %}
    <p>Burası bir layouttur...</p>
    {% endblock %}

</body>

mesela bu block içindeki metni değiştirmek istiyorsak index içine;

{% block World %}
<p>Burası aslında indextir. Layouttan gelen inheritance bu şekilde kullandık.</p>
{% endblock %}   yazıyoruz.


şimdide layout içinde title Layout olarak yazmıştık. Bunu block olarak yazıyoruz ve benden türüyen templates bunu değiştirebilsinler.

 <title>
        {% block title %}
        Layout
        {% endblock %}
 </title>

index.html de bunu overwrite yapmak istediğimizi belirtmediğimizden dolayı localhost ta bu ifadeyi değiştirmeyecek.

Bunun için 

{% block title %} Ana sayfa {% endblock %}  arasına Ana sayfa yazıp çalıştırınca artık layout inheritance title yerine buraya yazdığım title kullanılacak.




CSS

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous">


JS

<script src="https://code.jquery.com/jquery-3.1.1.slim.min.js" integrity="sha384-A7FZj7v+d/sdmMqp/nOQwliLvUsJfDHW+k9Omg/a/EheAdgtzNs3hpfag6Ed950n" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js" integrity="sha384-DztdAPBWPRXSA/3eYEEUWrWCy7G5KFbe8fFjk5JAIxUYHKkDx6Qin1DkWx51bBrb" crossorigin="anonymous"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script>
<script src="https://cdn.ckeditor.com/4.8.0/standard/ckeditor.js"></script>
<script src="https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js"></script>

# Bootstrap Kullanımı.

önce index.html oluşturduk. Sonra bunun içinde kullanmak için bir navbar.html oluşturduk.templates altında kullanacağım html dosyaları için bir tane includes klasörü oluşturdum.

boostrap 4 cdn neden boostrap css link alıp kopyaladık ve layout içinde meta altına kopyaladık. Aşağıdaki code ları aldık. sonra body içine de alttaki diğer 3 kodu kopyalayıp yapıştırdık.

CSS

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous">


JS

<script src="https://code.jquery.com/jquery-3.1.1.slim.min.js" integrity="sha384-A7FZj7v+d/sdmMqp/nOQwliLvUsJfDHW+k9Omg/a/EheAdgtzNs3hpfag6Ed950n" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js" integrity="sha384-DztdAPBWPRXSA/3eYEEUWrWCy7G5KFbe8fFjk5JAIxUYHKkDx6Qin1DkWx51bBrb" crossorigin="anonymous"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script>

daha sonra  google browsera bootstrap static navbar yazdık ancak ilk sayfayı beğenmedik sonrasındakini aldık. daha sonra siteye sağ tıklayıp sayfa kaynağına gittik ve buradaki nav class body altında bulunan etiketleri aldık.

view-source:https://getbootstrap.com/docs/4.0/examples/navbar-fixed/

sonra buradaki kodun kaynağınından navbar aldık.

<nav class="navbar navbar-expand-md navbar-dark fixed-top bg-dark">
      <a class="navbar-brand" href="#">Fixed navbar</a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarCollapse" aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarCollapse">
        <ul class="navbar-nav mr-auto">
          <li class="nav-item active">
            <a class="nav-link" href="#">Home <span class="sr-only">(current)</span></a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Link</a>
          </li>
          <li class="nav-item">
            <a class="nav-link disabled" href="#">Disabled</a>
          </li>
        </ul>
        <form class="form-inline mt-2 mt-md-0">
          <input class="form-control mr-sm-2" type="text" placeholder="Search" aria-label="Search">
          <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
        </form>
      </div>
    </nav>

ve navbar.html içine attık.

layout bu şekilde oluştu.

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">


    <title>YB Blog</title>
</head>

<body>

    {% include "includes/navbar.html" %}
    <br><br><br>   # yazıyı öne çekmek için kullandık.
    <div class="container">   # boostrapta çok kullanılır container yapısı. yazılarımız daha iyi görünsün diye. 
        
	{% block body %} 

	{% endblock %}

    </div>

    <script src="https://code.jquery.com/jquery-3.1.1.slim.min.js" integrity="sha384-A7FZj7v+d/sdmMqp/nOQwliLvUsJfDHW+k9Omg/a/EheAdgtzNs3hpfag6Ed950n" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js" integrity="sha384-DztdAPBWPRXSA/3eYEEUWrWCy7G5KFbe8fFjk5JAIxUYHKkDx6Qin1DkWx51bBrb" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script>

</body>

</html>

index.html bu şekilde: 

{% extends "layout.html" %}  # layout inheritance yaptı. Ancak block oluşturup içine yazdığımı kullandı.

{% block body %}
<h3>Ana Sayfa</h3>
{% endblock %}


navbar içindeki search bir form durumunda ve bunu kaldırmak istiyorum. sonra bunu farklı şekilde oluşturacağım.

<form class="form-inline mt-2 mt-md-0">
            <input class="form-control mr-sm-2" type="text" placeholder="Search" aria-label="Search">
            <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
</form>

fixed navbar ismini YB Blog olarak değiştirmek istiyorum.

<a class="navbar-brand" href="#">YB Blog</a>

YB Blog üzerine tıklayınca başka bir sayfaya gidiyor ancak ben route kendine dönmesini istiyorum. Bundan dolayı href="/"> yaptık. Yani bu durumda buna tıklayınca tekrar kök dizine gelmiş olacağım.


Buradaki div bizim elementlerin çoğunu barındırıyor.

<div class="collapse navbar-collapse" id="navbarCollapse">
        <ul class="navbar-nav mr-auto">  # sola yaslıyor. ml-auto yaparsam sağa yaslar.
            <li class="nav-item active">
                <a class="nav-link" href="#">Home <span class="sr-only">(current)</span></a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#">Link</a>
            </li>
            <li class="nav-item">
                <a class="nav-link disabled" href="#">Disabled</a>
            </li>
        </ul>
    </div>

yukarıdaki link ve disabled elementlerini silmek istiyorum.

home daki <span class="sr-only">(current)</span></a> etiketi sildik ve home yerine hakkımızda yazdık ve basıldığında /about diye bir url ye gitmesini istiyorum. 
son hali bu oldu.

<a class="nav-link" href="/about">Hakkımızda</a> 

ilave olarak yeni bir element ekledik.

<li class="nav-item active">
                <a class="nav-link" href="/articles">Makaleler</a>


daha sonra navbar.html ye ilave yaptık.

<ul class="navbar-nav mlauto">   # ml sağa yasladı.
            <li class="nav-item active">
                <a class="nav-link" href="/register">Kayıt Olun</a>
            </li>
            <li class="nav-item active">
                <a class="nav-link" href="/login">Giriş</a>
            </li>

Bu bölümde ise about.html oluşturduk. Bunun için blog_mine.py içine bir tane 

@app.route("/about")
def about():
    return render_template("about.html") tanımladık.

daha sonra about içine bunları yaptık.

{% extends "layout.html" %} 

{% block body %}
<h3>Hakkımda</h3> # diye bir başlık ekledik.
<hr> # etiketi ile düz bir çizgi çektik. 
{% endblock %}

daha sonra about içinde Hakkımda altına iki hr arasına metin ekledim.

{% extends "layout.html" %} {% block body %}
<h3>Hakkımda</h3>
<hr> Herkese merhaba.Ben Stephen King. Odtü Bilgisayar Mühendisliği bölümü mezunuyum.Yazılım Bilimi kanalını programlama ve yazılım öğrenmek isteyen gençlere ve yazılımcılara faydalı olmak ,aynı zamanda Türkiyede yazılımın ve eğitimin yükselmesi amacıyla
10 Nisan 2015 tarihinde kurdum.Şimdiye kadar elimden geldiğince video yüklemeye çalıştım.Bu kanaldaki amacım Yazılım Bilimini genel bir online akademiye dönüştürüp Türkiye’nin dört bir yanına ücretsiz bir şekilde eğitim verebilmek.Ülkemizin gençleri olarak
hep beraber yazılımı ve bilimi herkese aşılamaya çalışalım.Var mısınız? Programlama ve Yazılım Öğrenmeye yeni mi başlıyorsunuz ? İşte yol haritanız. 1.Web geliştirmek ve bu alanda uzmanlaşmak istiyorsanız Temel olarak HTML,CSS,Javascript öğrenmeye çalışın.Daha
sonra server-side(sunucu tarafı) diller ile kendinizi geliştirin.(Php,Python Django ,Asp,Ruby On Rails vs.) 2.Mobil uygulama mı geliştirmek istiyorsunuz ? Eğer çok yeniyseniz, ilk başta Python gibi algoritma ve programlama mantığını anlayacağınız bir
dille başlayın. Daha sonra hangi ortamda mobil geliştirme yapacağınıza karar verin.IOS geliştirmek istiyorsanız Swift,Android Programlamak istiyorsanız Java öğrenin.Daha sonra Android ve Java geliştirmeye başlarsınız. 3.Masaüstü uygulamaları(Arayüz Uygulamaları)
mı geliştirmek istiyorsunuz.Bunun için önünüzde bir çok seçenek var.Python,C#,Java gibi dillerle çok iyi arayüzler çıkarabilirsiniz. 4.Machine Learning ve Yapay zeka ilginizi çekiyorsa yazımı kolay olan ve çok verimli bir dil olan Python size yararlı
olacaktır.
<hr> {% endblock %}


{% extends "layout.html" %} {% block body %}
<h3>Ana Sayfa</h3>
{% endblock %}   içindeki h3 kaldırarak bunun yerine bootstrapten güzel bir div yazmak istiyorum.

daha sonra index.html içinde aşağıdaki işlemleri yaptık.

{% extends "layout.html" %} {% block body %}
<div class="jumbotron text-center">
    <h3>Yazılım Dünyası Bloğuna Hoşgeldiniz.</h3>
    <p>Bu blogta program geliştiriciler olarak blog yazılarınızı paylaşabilirsiniz ve bu konuda kendini geliştirmeye çalışan insanlara yardımcı olabilirsiniz.</p>
</div>
{% endblock %}


@app.route("/")  
def index():   
    return render_template("index.html", answer="evet")  içine bir python kodu gönderdik ve evet atadık.

daha sonra görüldüğü gibi bir if yapısı oluşturduk. Cevabıma göre bunu dönecek.

{% extends "layout.html" %} {% block body %}
<div class="jumbotron text-center">
    <h3>Yazılım Dünyası Bloğuna Hoşgeldiniz.</h3>
    <p>Bu blogta program geliştiriciler olarak blog yazılarınızı paylaşabilirsiniz ve bu konuda kendini geliştirmeye çalışan insanlara yardımcı olabilirsiniz.</p>
</div>
{% if answer=="evet" %}
<p>Cevabımız evetmiş...</p>
{% else %}
<p>Cevabımız evet değilmiş...</p>
{% endif %}

{% endblock %}

daha sonra aşağıdaki gibi değiştirdik.

@app.route("/")  
def index():   
    return render_template("index.html", islem=1)

index.html içini de aşağıdaki gibi değiştirdik.

{% if islem==1 %}
<p>1.islem</p>
{% elif islem==2 %}
<p>2.islem</p>
{% else %}
<p>Geçersiz bir işlem...</p>
{% endif %}


for döngüsünün kullanımı:

blog_mine.py içine alttaki kodu yazdık.

def index():   
    numbers = [1,2,3,4,5]   # bunun yerine tuple da yazabilir ve içinde gezinebiliriz.
    
    return render_template("index.html", numbers=numbers)


sonrasında index.html içine aşağıdaki for döngü kodunu yazdık.

<ul>
    {% for number in numbers %}
        <li>{{number}}</li>
    {% endfor %}
</ul>


for döngüsü için bu sefer blog_mine.py içine bir dict tanımladık ve bunun her bir elemanında dolaşacağız.


@app.route("/")  
def index():   
    articles = [{"id":1, "title":"Deneme1","content":"Deneme1 içerik"},
               {"id":2, "title":"Deneme2","content":"Deneme2 içerik"},
               {"id":3, "title":"Deneme3","content":"Deneme3 içerik"}
               ]
    
    return render_template("index.html", articles=articles)


daha sonra index.html içinde for döngüsünü döndürüp dolaşıyoruz. 

<ul>
    {% for article in articles %}
    <li>Article Id:{{article.id}} - Article Title:{{article.title}} - Article Content:{{article.content}} </li>
    {% endfor %}
</ul>


Dinamik URL yapısı: blog_mine.py içine aşağıdaki func tanımladık.

@app.route("/article/<string:id>")  # local host http://localhost:5000/article/1 yazınca burada artık Article Id :1 dönecek.
def detail(id):
    return "Article Id:"+id


# Flask MySQL konfigurasyonu için aşağıdaki modülleri indiriyoruz.(third party modüller)
1. cmd den pip install flask-mysqldb  
2. pip install Flask-WTF   # form classları oluşturmak için kullanacağız.
3. pip install passlib  kullanıcılar ilave edince bunun şifrelenmesi için kullanıyoruz.

blog_mine.py içine bunları dahil ettik. 

from flask import Flask, render_template, flash, redirect, url_for, session, logging, request
from flask_mysqldb import MySQL 
from wtforms import Form, StringField, TextAreaField, PasswordField, validators
from passlib.hash import sha256_crypt 

xampp mutlaka açık olmalı. burada yeni veritabanı oluşturu seçtik. daha sonra veritabanına isim verdik. ve karşılaştırma türkçe destekli olsun diye utf-general-ci seçtik.
sonrasında içine verileri saklayacağımız tabloları oluşturuyoruz. daha sonra kaç feature dan oluşacaksak onu seçtik. Açılan ekranda feature ları dolduruyoruz.
ilk feature id seçtim ve bunu primary yaptım ve auto olarak herkişi eklendiğinde artmasını istediğimden dolayı thick işaretledim.

daha sonra blog_mine.py içine     https://flask-mysqldb.readthedocs.io/en/latest/  linkinden olması gerekenleri yazıyorum.

app = Flask(__name__)  

app.config["MYSQL_HOST"] = "localhost"  # eğer kiralık olsaydı o sunucunun adresini vermemiz gerekirdi. şimdi bizimki localhostta çalışıyor.
app.config["MYSQL_USER"] = "root"      # kendi bs bağlandığımızdan dolayı varsayılan olarak kullanıcı root ve parolası boş olarak geliyor.
app.config["MYSQL_PASSWORD"] = ""
app.config["MYSQL_DB"]="ybblog"        # db olarak da oluşturduğumuz db ismini girdik.
app.config["MYSQL_CURSORCLASS"] = "DictCursor"   # dict formatında daha anlaşılır bir şekilde almak için.

mysql = MySQL(app)    # mysql kullanmak için bir tane obje oluşturuyorum. buradaki app ile mysql bağlamak için app içine parametre olarak verdik.


WTForms ile kullanıcı kayıt formu oluşturma:
bu formu kullanarak bir tane register formu oluşturarak diğer başka formları buradan türetebiliriz. Daha az kod ile daha çok iş yapmış olacağız.

https://wtforms.readthedocs.io/en/3.0.x/forms/#defining-forms  buradan bakıyoruz.


# Kullanıcı Kayıt Formu :

class RegisterForm(Form):
    name = StringField("İsim Soyisim", validators=[validators.Length(min=4, max=25)])
    username = StringField("Kullanıcı Adı", validators=[validators.Length(min=5, max=35)])
    email = StringField("Email Adres", validators=[validators.Email(message = "Lütfen Geçerli Bir Email Adresi Giriniz.")])
    password = PasswordField("Parolo: ", validators= [
        validators.DataRequired(message = "Lütfen bir parola belirleyiniz."),
        validators.EqualTo(fieldname = "confirm", message ="Parola uyuşmuyor...")
        ])
    confirm = PasswordField("Parola Doğrula")    ile bir kullanıcı formu oluşturduk.


# register sayfası oluşturmak için:
önce register.html oluşturduk.

{% extends "layout.html" %} {% block body %}
<h3>Kayıt Olun</h3>
<hr><hr>   # boşluk iki çizgi bıraktık.
{% endblock %}

iki türlü request var(get ve post). Bunlardan hangisini kullanacaksak bunu belirtmemiz gerekir.

# Kayıt olma
@app.route("/register", method=["GET","POST"]):  # burada hangi request i kullanmak istediğimiz yazıyoruz. ikiside olabilir.
def register():
    form = RegisterForm(request.form)    içine birşey vermezsek boş olarak algılayacak. bize gelen form isteğini registerform ile aldık ve form üzerinde kaydettik.
    
    if request.method =="POST":    # gelen request in ne olduğunu kontrol ediyoruz.
        pass
    else:
        return render_template("register.html") 

localhost ta her refresh yapınca getrequest taleplerinin hangi saat diliminde geldiğini terminalde görebiliyoruz.

request in get olma durumunu localhost ta göstermek için;

return render_template("register.html", form=form)  içinde form=form yaptık.

formhelpers.html isimli bir template oluşturduk ve içine bir tane macro oluşturduk.

{% macro render_field(field) %}
  <dt>{{ field.label }}
  <dd>{{ field(**kwargs)|safe }}
  {% if field.errors %}
    <ul class=errors>
    {% for error in field.errors %}
      <li>{{ error }}</li>
    {% endfor %}
    </ul>
  {% endif %}
  </dd>
{% endmacro %}


https://getbootstrap.com/docs/4.0/components/buttons/  den button özelliklerini aldık.

<button type="submit" class="btn btn-primary">Kayıt Ol</button>  olarak register.html içine kaydettik.

sayfamız daha güzel gözüksün diye

{{ render_field(form.name, class = "form-control") }} {{ render_field(form.username, class = "form-control") }} {{ render_field(form.email, class = "form-control") }} {{ render_field(form.password, class = "form-control") }} {{ render_field(form.confirm, class = "form-control")

şeklinde bir düzeltme yaptık. ve kayıt formundaki alanlar daha büyük hale geldi.


request isteğimiz post olsaydı pass ile geçiyorduk. 

return redirect(url_for("index"))  şeklinde bir düzeltme ile post request olduğundan index in root url sine geri dönüyoruz. 
Yani kayıt formunu doldurduğumuzda tekrar ana sayfaya dönüyoruz.

# Şu ana kadar veri tabanına herhangi bir kayıt yapmadık. Şimdi bunu nasıl yaparız ona bakalım.

şu ana kadar validator ile kontrollerimizi yapmıştık. Şimdi request=post ve formumuz geçerli ise ilave bir kontrol daha ekliyoruz.

if request.method =="POST" and form.validate():   formda sorun yoksa tekrar index döneceğiz. bundan önce db kayıt işlemini tamamlamız gerekir.

phpmyadmin içinde oluşturduğum tableda users bakınca boş olduğunu görüyorum.

    if request.method =="POST" and form.validate():
        name = form.name.expandata 
        username = form.username.data 
        email = form.email.data 
        password = sha256_crpyt.encrypt(form.password.data) sha ile şifreyi şifrelemiş olduk.

mysql objesi üzerinde bir tane cursor oluşturuyoruz. Bu db üzerinde işlem yapmamızı sağlayan bir yapı. Biz bu yapı ile sql sorgularımızı çalıştırıyoruz.

cursor = mysql.connection.cursor()
sorgu = "Insert into users(name, username, email, password) VALUES(%s,%s,%s,%s)"  # burada sorgu isimli bir sql query oluşturduk. 
cursor.execute(sorgu,(name, username, email, password)) # cursora bir demet gönderdik. eğer tek elemanlı bir demet göndermek isteseydik bu durumda (name,) şeklinde göndermemiz gerekirdi.
mysql.connection.commit()  # veri tabanında eğer silme veya güncelleme gibi bir işlem yapmak istiyorsak bunu mutlaka yazmak zorundayız. Sadece veri çekmek istiyorsak bunu yapmamıza gerek yok.
cursor.close() # sonraki kaynakların kullanılmaması için bunu alışkanlık haline getirmek gerekir.

cursor kullanınca veri tabanımızda bir tane query çalışmış oluyor.

bu işlemlerden sonra localhost ta bir kayıt oluşturup bunu xampp deki users ten bu kaydı görebiliyoruz.


# message flashing yani kayıt işlemi sonrası kullanıcıya bir geribildirim vermemiz gerekir. Bunu kullanınca bir sonraki sitede göstermemiz gerekir.
bir tane message.html oluşturup içine bunu yazdık. Bunu her yerden ulaşabildiğim bir template içine koymam gerekir. Buda layout template.

{% with messages = get_flashed_messages(with_categories=true) %}
  {% if messages %}
    <ul class=flashes>
    {% for category, message in messages %}
      <li class="{{ category }}">{{ message }}</li>
    {% endfor %}
    </ul>
  {% endif %}
{% endwith %}

layout içinde container içine dahil ettim. 

<div class="container">
        {% include "includes/messages.html" %}


daha sonra blog_mine.py içine 

mysql.connection.commit()
        cursor.close()
        
        flash("Kayıt işlemi başarı ile sonuçlanmıştır.Tebrikler...","success")  #bunun ile içine iki parametre verdik. 
post request olunca bir flash yapıp, sonrasında redirect yaptık ve redirect ile index sayfasına bir get request yaptık. Bir sonraki requestte bu flash message ekranda yayınlanıyor.

RuntimeError: The session is unavailable because no secret key was set.  Set the secret_key on the application to something unique and secret.  hatası veriyor. Kendi app bir script vermemiz gerekiyorki flash mesajlarını kullanalım.

app = Flask(__name__)  
app.secret_key = "ybblog"  rastgele bir içeriği olan bir key tanımlıyoruz. Buradaki mesaj, messages.html içindeki <li class="{{ category }}">{{ message }}</li>
bakıyor category varsa bunu mesajlardan alıp getiriyor.
Bunu biraz daha gösterişli getireceğiz.messages.html içindeki
<li class="{{ category }}">{{ message }}</li> sildik. 

Bunun yerine ;
<div class="alert alert-{{ category }}" role="alert">   bootstrap 4 alert mesaj örneklerinden aldık. Burada iki süslü parantez içinde yazdığımız category ne olursa ona göre role alert olacak.
        {{message}}  # buraya da message gelsin istedik.
    </div>

localhost kayıt yaptığımızda flash messagının geldiğini göreceğiz. sayfayı refresh yapınca bunun gelmediğini göreceğiz. çünkü flash mesajları bir kullanımlıktır.

# login ekranı ekleme:

blog_mine.py içine ekleme yaptık.

@app.route("/login", methods =["GET","POST"])  # login ve post yaparken içine methods tanımladık.
def login():
    form = LoginForm(request.form)
    
    return render_template("login.html", form=form)


navbar içine aşağıdaki kodu ekledik.

<li class="nav-item active">
                <a class="nav-link" href="/login">Giriş Yap</a>
            </li>

login.html template oluşturduk.

{% extends "layout.html" %} {% block body %}
<h3>Giriş Yap</h3>
<hr> {% from "includes/formhelpers.html" import render_field %}

<form method="post">

    {{ render_field(form.username) }} {{ render_field(form.password) }}

    <button type="submit" class="btn btn-primary">Giriş Yap</button>
</form>
{% endblock %}

İnsanlar kayıt olduktan sonra girip yap kısmına gitmek isterler. Ancak şu an bizim yaptığımızda anasayfaya gidiyorlar. bunda da biraz değişiklik yapalım.

cursor.close()
        flash("Kayıt işlemi başarı ile sonuçlanmıştır.","success")
        return redirect(url_for("index"))   #buradaki index, login olarak değiştirdik.

# Login İşlemi:
@app.route("/login", methods =["GET","POST"])
def login():
    form = LoginForm(request.form)    #login form oluşturduk.
    if request.method == "POST":      # request post ise formun içindeki bilgileri aldık.
        username = form.username.data
        password_entered = form.password.data

        cursor = mysql.connection.cursor()   # cursor oluşturduk.
        sorgu = "Select * From users where username = %s"

        result = cursor.execute(sorgu,(username,))
        
        if result > 0 :
            data = 
        else:
            flash("Böyle bir kullanıcı bulunmuyor...","danger")
            return redirect(url_for("login"))
        
    return render_template("login.html", form=form)

# şimde ise kullanıcının girdiği login bilgilerinin varolan bilgiler ile uyuşup uyuşmadığını kontrol etmek için blog_mine.py içinde eklemeler yapıyoruz.

# Login İşlemi:
@app.route("/login", methods =["GET","POST"])
def login():
    form = LoginForm(request.form)
    if request.method == "POST":
        username = form.username.data
        password_entered = form.password.data

        cursor = mysql.connection.cursor()

        sorgu = "Select * From users where username = %s"

        result = cursor.execute(sorgu,(username,))
        
        if result > 0 :
            data = cursor.fetchone()  # kullanıcıya ait tüm veriyi çektik.
            real_password = data["password"] #sözlükte gezindiğim gibi geziniyorum.
            if sha256_crypt.verify(password_entered, real_password):  # girilen şifre ile gerçek şifreyi karşılaştırdık.
                flash("Başarı ile giriş yaptınız.","success")
                return redirect(url_for("index"))
            else:
                flash("Parolanızı Yanlış Girdiniz.","danger")
                return redirect(url_for("login"))
                
        
        else:
            flash("Böyle bir kullanıcı bulunmuyor...","danger")
            return redirect(url_for("login"))
        
    return render_template("login.html", form=form)
